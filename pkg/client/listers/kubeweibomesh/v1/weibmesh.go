/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/idevz/kwm/pkg"
	v1 "github.com/idevz/kwm/pkg/apis/kubeweibomesh/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WeibMeshLister helps list WeibMeshes.
type WeibMeshLister interface {
	// List lists all WeibMeshes in the indexer.
	List(selector labels.Selector) (ret []*v1.WeibMesh, err error)
	// WeibMeshes returns an object that can list and get WeibMeshes.
	WeibMeshes(namespace string) WeibMeshNamespaceLister
	pkg.WeibMeshListerExpansion
}

// weibMeshLister implements the WeibMeshLister interface.
type weibMeshLister struct {
	indexer cache.Indexer
}

// NewWeibMeshLister returns a new WeibMeshLister.
func NewWeibMeshLister(indexer cache.Indexer) WeibMeshLister {
	return &weibMeshLister{indexer: indexer}
}

// List lists all WeibMeshes in the indexer.
func (s *weibMeshLister) List(selector labels.Selector) (ret []*v1.WeibMesh, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.WeibMesh))
	})
	return ret, err
}

// WeibMeshes returns an object that can list and get WeibMeshes.
func (s *weibMeshLister) WeibMeshes(namespace string) WeibMeshNamespaceLister {
	return weibMeshNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WeibMeshNamespaceLister helps list and get WeibMeshes.
type WeibMeshNamespaceLister interface {
	// List lists all WeibMeshes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.WeibMesh, err error)
	// Get retrieves the WeibMesh from the indexer for a given namespace and name.
	Get(name string) (*v1.WeibMesh, error)
	pkg.WeibMeshNamespaceListerExpansion
}

// weibMeshNamespaceLister implements the WeibMeshNamespaceLister
// interface.
type weibMeshNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WeibMeshes in the indexer for a given namespace.
func (s weibMeshNamespaceLister) List(selector labels.Selector) (ret []*v1.WeibMesh, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.WeibMesh))
	})
	return ret, err
}

// Get retrieves the WeibMesh from the indexer for a given namespace and name.
func (s weibMeshNamespaceLister) Get(name string) (*v1.WeibMesh, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("weibmesh"), name)
	}
	return obj.(*v1.WeibMesh), nil
}
